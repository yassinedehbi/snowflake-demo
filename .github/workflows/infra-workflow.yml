name: "Snowflake Terraform Workflow"

on:
  push:
    branches:
      - main
  pull_request:
  
  workflow_dispatch:
    inputs:
      ENVIRONMENT:
        description: 'Environment to deploy to (DEV, TEST, PROD !! only) (lower case)'
        required: false
        default: "PROD"  # Default for manual runs without quotes

permissions:
  issues: write
  pull-requests: write
  
jobs:
  snowflake-terraform-demo:
    name: "Snowflake Terraform Demo Job"
    runs-on: ubuntu-latest
    defaults:
        run:
            working-directory: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
      
      - name: Set Terraform workspace Test
        if: github.event_name == 'pull_request' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
        run: terraform workspace select test 

      - name: Set Terraform workspace ENV
        if: github.event_name == 'workflow_dispatch'
        run: terraform workspace select ${{ github.event.inputs.ENVIRONMENT }}

      - name: Terraform Init
        id: init
        run: terraform init

      

      

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: set test vars 
        id: testvar
        if: github.event_name == 'pull_request' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
        run: cp ../vars/test.auto.tfvars var.auto.tfvars

      - name: set vars (manual) 
        id: customvar
        if: github.event_name == 'workflow_dispatch'
        run: cp ../vars/${{ github.event.inputs.ENVIRONMENT }}.auto.tfvars var.auto.tfvars

      - name: Terraform TEST Plan
        id: test_plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true

      - name: Terraform Custom Plan
        id: prod_plan
        if: github.event_name == 'workflow_dispatch'
        run: terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.test_plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.test_plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply 
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
     

      - name: Set environment for workflow_dispatch
        if: github.event_name == 'workflow_dispatch'
        run: terraform apply -auto-approve
